// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/site-tech/fake-data-service/ent/airline"
)

// Airline is the model entity for the Airline schema.
type Airline struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Alias holds the value of the "alias" field.
	Alias string `json:"alias,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Airline) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case airline.FieldActive:
			values[i] = new(sql.NullBool)
		case airline.FieldID:
			values[i] = new(sql.NullInt64)
		case airline.FieldName, airline.FieldAlias, airline.FieldCountry:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Airline", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Airline fields.
func (a *Airline) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case airline.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case airline.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case airline.FieldAlias:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alias", values[i])
			} else if value.Valid {
				a.Alias = value.String
			}
		case airline.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				a.Country = value.String
			}
		case airline.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				a.Active = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Airline.
// Note that you need to call Airline.Unwrap() before calling this method if this Airline
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Airline) Update() *AirlineUpdateOne {
	return NewAirlineClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Airline entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Airline) Unwrap() *Airline {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Airline is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Airline) String() string {
	var builder strings.Builder
	builder.WriteString("Airline(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("alias=")
	builder.WriteString(a.Alias)
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(a.Country)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", a.Active))
	builder.WriteByte(')')
	return builder.String()
}

// Airlines is a parsable slice of Airline.
type Airlines []*Airline
