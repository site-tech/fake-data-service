// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/site-tech/fake-data-service/ent/predicate"
	"github.com/site-tech/fake-data-service/ent/route"
)

// RouteUpdate is the builder for updating Route entities.
type RouteUpdate struct {
	config
	hooks    []Hook
	mutation *RouteMutation
}

// Where appends a list predicates to the RouteUpdate builder.
func (ru *RouteUpdate) Where(ps ...predicate.Route) *RouteUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetAirline sets the "airline" field.
func (ru *RouteUpdate) SetAirline(s string) *RouteUpdate {
	ru.mutation.SetAirline(s)
	return ru
}

// SetSourceAirportId sets the "sourceAirportId" field.
func (ru *RouteUpdate) SetSourceAirportId(i int) *RouteUpdate {
	ru.mutation.ResetSourceAirportId()
	ru.mutation.SetSourceAirportId(i)
	return ru
}

// AddSourceAirportId adds i to the "sourceAirportId" field.
func (ru *RouteUpdate) AddSourceAirportId(i int) *RouteUpdate {
	ru.mutation.AddSourceAirportId(i)
	return ru
}

// SetDestinationAirportId sets the "destinationAirportId" field.
func (ru *RouteUpdate) SetDestinationAirportId(i int) *RouteUpdate {
	ru.mutation.ResetDestinationAirportId()
	ru.mutation.SetDestinationAirportId(i)
	return ru
}

// AddDestinationAirportId adds i to the "destinationAirportId" field.
func (ru *RouteUpdate) AddDestinationAirportId(i int) *RouteUpdate {
	ru.mutation.AddDestinationAirportId(i)
	return ru
}

// SetNumberOfStops sets the "numberOfStops" field.
func (ru *RouteUpdate) SetNumberOfStops(i int) *RouteUpdate {
	ru.mutation.ResetNumberOfStops()
	ru.mutation.SetNumberOfStops(i)
	return ru
}

// AddNumberOfStops adds i to the "numberOfStops" field.
func (ru *RouteUpdate) AddNumberOfStops(i int) *RouteUpdate {
	ru.mutation.AddNumberOfStops(i)
	return ru
}

// Mutation returns the RouteMutation object of the builder.
func (ru *RouteUpdate) Mutation() *RouteMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RouteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RouteMutation](ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RouteUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RouteUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RouteUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RouteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(route.Table, route.Columns, sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Airline(); ok {
		_spec.SetField(route.FieldAirline, field.TypeString, value)
	}
	if value, ok := ru.mutation.SourceAirportId(); ok {
		_spec.SetField(route.FieldSourceAirportId, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedSourceAirportId(); ok {
		_spec.AddField(route.FieldSourceAirportId, field.TypeInt, value)
	}
	if value, ok := ru.mutation.DestinationAirportId(); ok {
		_spec.SetField(route.FieldDestinationAirportId, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedDestinationAirportId(); ok {
		_spec.AddField(route.FieldDestinationAirportId, field.TypeInt, value)
	}
	if value, ok := ru.mutation.NumberOfStops(); ok {
		_spec.SetField(route.FieldNumberOfStops, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedNumberOfStops(); ok {
		_spec.AddField(route.FieldNumberOfStops, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{route.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RouteUpdateOne is the builder for updating a single Route entity.
type RouteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RouteMutation
}

// SetAirline sets the "airline" field.
func (ruo *RouteUpdateOne) SetAirline(s string) *RouteUpdateOne {
	ruo.mutation.SetAirline(s)
	return ruo
}

// SetSourceAirportId sets the "sourceAirportId" field.
func (ruo *RouteUpdateOne) SetSourceAirportId(i int) *RouteUpdateOne {
	ruo.mutation.ResetSourceAirportId()
	ruo.mutation.SetSourceAirportId(i)
	return ruo
}

// AddSourceAirportId adds i to the "sourceAirportId" field.
func (ruo *RouteUpdateOne) AddSourceAirportId(i int) *RouteUpdateOne {
	ruo.mutation.AddSourceAirportId(i)
	return ruo
}

// SetDestinationAirportId sets the "destinationAirportId" field.
func (ruo *RouteUpdateOne) SetDestinationAirportId(i int) *RouteUpdateOne {
	ruo.mutation.ResetDestinationAirportId()
	ruo.mutation.SetDestinationAirportId(i)
	return ruo
}

// AddDestinationAirportId adds i to the "destinationAirportId" field.
func (ruo *RouteUpdateOne) AddDestinationAirportId(i int) *RouteUpdateOne {
	ruo.mutation.AddDestinationAirportId(i)
	return ruo
}

// SetNumberOfStops sets the "numberOfStops" field.
func (ruo *RouteUpdateOne) SetNumberOfStops(i int) *RouteUpdateOne {
	ruo.mutation.ResetNumberOfStops()
	ruo.mutation.SetNumberOfStops(i)
	return ruo
}

// AddNumberOfStops adds i to the "numberOfStops" field.
func (ruo *RouteUpdateOne) AddNumberOfStops(i int) *RouteUpdateOne {
	ruo.mutation.AddNumberOfStops(i)
	return ruo
}

// Mutation returns the RouteMutation object of the builder.
func (ruo *RouteUpdateOne) Mutation() *RouteMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RouteUpdate builder.
func (ruo *RouteUpdateOne) Where(ps ...predicate.Route) *RouteUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RouteUpdateOne) Select(field string, fields ...string) *RouteUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Route entity.
func (ruo *RouteUpdateOne) Save(ctx context.Context) (*Route, error) {
	return withHooks[*Route, RouteMutation](ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RouteUpdateOne) SaveX(ctx context.Context) *Route {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RouteUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RouteUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RouteUpdateOne) sqlSave(ctx context.Context) (_node *Route, err error) {
	_spec := sqlgraph.NewUpdateSpec(route.Table, route.Columns, sqlgraph.NewFieldSpec(route.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Route.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, route.FieldID)
		for _, f := range fields {
			if !route.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != route.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Airline(); ok {
		_spec.SetField(route.FieldAirline, field.TypeString, value)
	}
	if value, ok := ruo.mutation.SourceAirportId(); ok {
		_spec.SetField(route.FieldSourceAirportId, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedSourceAirportId(); ok {
		_spec.AddField(route.FieldSourceAirportId, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.DestinationAirportId(); ok {
		_spec.SetField(route.FieldDestinationAirportId, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedDestinationAirportId(); ok {
		_spec.AddField(route.FieldDestinationAirportId, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.NumberOfStops(); ok {
		_spec.SetField(route.FieldNumberOfStops, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedNumberOfStops(); ok {
		_spec.AddField(route.FieldNumberOfStops, field.TypeInt, value)
	}
	_node = &Route{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{route.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
