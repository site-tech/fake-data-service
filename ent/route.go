// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/site-tech/fake-data-service/ent/route"
)

// Route is the model entity for the Route schema.
type Route struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AirlineId holds the value of the "airlineId" field.
	AirlineId int `json:"airlineId,omitempty"`
	// SourceAirportId holds the value of the "sourceAirportId" field.
	SourceAirportId int `json:"sourceAirportId,omitempty"`
	// DestinationAirportId holds the value of the "destinationAirportId" field.
	DestinationAirportId int `json:"destinationAirportId,omitempty"`
	// PlaneId holds the value of the "planeId" field.
	PlaneId int `json:"planeId,omitempty"`
	// NumberOfStops holds the value of the "numberOfStops" field.
	NumberOfStops int `json:"numberOfStops,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Route) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case route.FieldID, route.FieldAirlineId, route.FieldSourceAirportId, route.FieldDestinationAirportId, route.FieldPlaneId, route.FieldNumberOfStops:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Route", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Route fields.
func (r *Route) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case route.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case route.FieldAirlineId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field airlineId", values[i])
			} else if value.Valid {
				r.AirlineId = int(value.Int64)
			}
		case route.FieldSourceAirportId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sourceAirportId", values[i])
			} else if value.Valid {
				r.SourceAirportId = int(value.Int64)
			}
		case route.FieldDestinationAirportId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field destinationAirportId", values[i])
			} else if value.Valid {
				r.DestinationAirportId = int(value.Int64)
			}
		case route.FieldPlaneId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field planeId", values[i])
			} else if value.Valid {
				r.PlaneId = int(value.Int64)
			}
		case route.FieldNumberOfStops:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field numberOfStops", values[i])
			} else if value.Valid {
				r.NumberOfStops = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Route.
// Note that you need to call Route.Unwrap() before calling this method if this Route
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Route) Update() *RouteUpdateOne {
	return NewRouteClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Route entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Route) Unwrap() *Route {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Route is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Route) String() string {
	var builder strings.Builder
	builder.WriteString("Route(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("airlineId=")
	builder.WriteString(fmt.Sprintf("%v", r.AirlineId))
	builder.WriteString(", ")
	builder.WriteString("sourceAirportId=")
	builder.WriteString(fmt.Sprintf("%v", r.SourceAirportId))
	builder.WriteString(", ")
	builder.WriteString("destinationAirportId=")
	builder.WriteString(fmt.Sprintf("%v", r.DestinationAirportId))
	builder.WriteString(", ")
	builder.WriteString("planeId=")
	builder.WriteString(fmt.Sprintf("%v", r.PlaneId))
	builder.WriteString(", ")
	builder.WriteString("numberOfStops=")
	builder.WriteString(fmt.Sprintf("%v", r.NumberOfStops))
	builder.WriteByte(')')
	return builder.String()
}

// Routes is a parsable slice of Route.
type Routes []*Route
