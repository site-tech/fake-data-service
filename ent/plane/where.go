// Code generated by ent, DO NOT EDIT.

package plane

import (
	"entgo.io/ent/dialect/sql"
	"github.com/site-tech/fake-data-service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Plane {
	return predicate.Plane(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Plane {
	return predicate.Plane(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Plane {
	return predicate.Plane(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Plane {
	return predicate.Plane(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Plane {
	return predicate.Plane(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Plane {
	return predicate.Plane(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Plane {
	return predicate.Plane(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Plane {
	return predicate.Plane(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Plane {
	return predicate.Plane(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Plane {
	return predicate.Plane(sql.FieldEQ(FieldName, v))
}

// TailNumber applies equality check predicate on the "tailNumber" field. It's identical to TailNumberEQ.
func TailNumber(v string) predicate.Plane {
	return predicate.Plane(sql.FieldEQ(FieldTailNumber, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Plane {
	return predicate.Plane(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Plane {
	return predicate.Plane(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Plane {
	return predicate.Plane(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Plane {
	return predicate.Plane(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Plane {
	return predicate.Plane(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Plane {
	return predicate.Plane(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Plane {
	return predicate.Plane(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Plane {
	return predicate.Plane(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Plane {
	return predicate.Plane(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Plane {
	return predicate.Plane(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Plane {
	return predicate.Plane(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Plane {
	return predicate.Plane(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Plane {
	return predicate.Plane(sql.FieldContainsFold(FieldName, v))
}

// TailNumberEQ applies the EQ predicate on the "tailNumber" field.
func TailNumberEQ(v string) predicate.Plane {
	return predicate.Plane(sql.FieldEQ(FieldTailNumber, v))
}

// TailNumberNEQ applies the NEQ predicate on the "tailNumber" field.
func TailNumberNEQ(v string) predicate.Plane {
	return predicate.Plane(sql.FieldNEQ(FieldTailNumber, v))
}

// TailNumberIn applies the In predicate on the "tailNumber" field.
func TailNumberIn(vs ...string) predicate.Plane {
	return predicate.Plane(sql.FieldIn(FieldTailNumber, vs...))
}

// TailNumberNotIn applies the NotIn predicate on the "tailNumber" field.
func TailNumberNotIn(vs ...string) predicate.Plane {
	return predicate.Plane(sql.FieldNotIn(FieldTailNumber, vs...))
}

// TailNumberGT applies the GT predicate on the "tailNumber" field.
func TailNumberGT(v string) predicate.Plane {
	return predicate.Plane(sql.FieldGT(FieldTailNumber, v))
}

// TailNumberGTE applies the GTE predicate on the "tailNumber" field.
func TailNumberGTE(v string) predicate.Plane {
	return predicate.Plane(sql.FieldGTE(FieldTailNumber, v))
}

// TailNumberLT applies the LT predicate on the "tailNumber" field.
func TailNumberLT(v string) predicate.Plane {
	return predicate.Plane(sql.FieldLT(FieldTailNumber, v))
}

// TailNumberLTE applies the LTE predicate on the "tailNumber" field.
func TailNumberLTE(v string) predicate.Plane {
	return predicate.Plane(sql.FieldLTE(FieldTailNumber, v))
}

// TailNumberContains applies the Contains predicate on the "tailNumber" field.
func TailNumberContains(v string) predicate.Plane {
	return predicate.Plane(sql.FieldContains(FieldTailNumber, v))
}

// TailNumberHasPrefix applies the HasPrefix predicate on the "tailNumber" field.
func TailNumberHasPrefix(v string) predicate.Plane {
	return predicate.Plane(sql.FieldHasPrefix(FieldTailNumber, v))
}

// TailNumberHasSuffix applies the HasSuffix predicate on the "tailNumber" field.
func TailNumberHasSuffix(v string) predicate.Plane {
	return predicate.Plane(sql.FieldHasSuffix(FieldTailNumber, v))
}

// TailNumberEqualFold applies the EqualFold predicate on the "tailNumber" field.
func TailNumberEqualFold(v string) predicate.Plane {
	return predicate.Plane(sql.FieldEqualFold(FieldTailNumber, v))
}

// TailNumberContainsFold applies the ContainsFold predicate on the "tailNumber" field.
func TailNumberContainsFold(v string) predicate.Plane {
	return predicate.Plane(sql.FieldContainsFold(FieldTailNumber, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Plane) predicate.Plane {
	return predicate.Plane(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Plane) predicate.Plane {
	return predicate.Plane(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Plane) predicate.Plane {
	return predicate.Plane(func(s *sql.Selector) {
		p(s.Not())
	})
}
