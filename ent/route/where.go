// Code generated by ent, DO NOT EDIT.

package route

import (
	"entgo.io/ent/dialect/sql"
	"github.com/site-tech/fake-data-service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldID, id))
}

// AirlineId applies equality check predicate on the "airlineId" field. It's identical to AirlineIdEQ.
func AirlineId(v int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldAirlineId, v))
}

// SourceAirportId applies equality check predicate on the "sourceAirportId" field. It's identical to SourceAirportIdEQ.
func SourceAirportId(v int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldSourceAirportId, v))
}

// DestinationAirportId applies equality check predicate on the "destinationAirportId" field. It's identical to DestinationAirportIdEQ.
func DestinationAirportId(v int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldDestinationAirportId, v))
}

// PlaneId applies equality check predicate on the "planeId" field. It's identical to PlaneIdEQ.
func PlaneId(v int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldPlaneId, v))
}

// NumberOfStops applies equality check predicate on the "numberOfStops" field. It's identical to NumberOfStopsEQ.
func NumberOfStops(v int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldNumberOfStops, v))
}

// AirlineIdEQ applies the EQ predicate on the "airlineId" field.
func AirlineIdEQ(v int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldAirlineId, v))
}

// AirlineIdNEQ applies the NEQ predicate on the "airlineId" field.
func AirlineIdNEQ(v int) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldAirlineId, v))
}

// AirlineIdIn applies the In predicate on the "airlineId" field.
func AirlineIdIn(vs ...int) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldAirlineId, vs...))
}

// AirlineIdNotIn applies the NotIn predicate on the "airlineId" field.
func AirlineIdNotIn(vs ...int) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldAirlineId, vs...))
}

// AirlineIdGT applies the GT predicate on the "airlineId" field.
func AirlineIdGT(v int) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldAirlineId, v))
}

// AirlineIdGTE applies the GTE predicate on the "airlineId" field.
func AirlineIdGTE(v int) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldAirlineId, v))
}

// AirlineIdLT applies the LT predicate on the "airlineId" field.
func AirlineIdLT(v int) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldAirlineId, v))
}

// AirlineIdLTE applies the LTE predicate on the "airlineId" field.
func AirlineIdLTE(v int) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldAirlineId, v))
}

// SourceAirportIdEQ applies the EQ predicate on the "sourceAirportId" field.
func SourceAirportIdEQ(v int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldSourceAirportId, v))
}

// SourceAirportIdNEQ applies the NEQ predicate on the "sourceAirportId" field.
func SourceAirportIdNEQ(v int) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldSourceAirportId, v))
}

// SourceAirportIdIn applies the In predicate on the "sourceAirportId" field.
func SourceAirportIdIn(vs ...int) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldSourceAirportId, vs...))
}

// SourceAirportIdNotIn applies the NotIn predicate on the "sourceAirportId" field.
func SourceAirportIdNotIn(vs ...int) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldSourceAirportId, vs...))
}

// SourceAirportIdGT applies the GT predicate on the "sourceAirportId" field.
func SourceAirportIdGT(v int) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldSourceAirportId, v))
}

// SourceAirportIdGTE applies the GTE predicate on the "sourceAirportId" field.
func SourceAirportIdGTE(v int) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldSourceAirportId, v))
}

// SourceAirportIdLT applies the LT predicate on the "sourceAirportId" field.
func SourceAirportIdLT(v int) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldSourceAirportId, v))
}

// SourceAirportIdLTE applies the LTE predicate on the "sourceAirportId" field.
func SourceAirportIdLTE(v int) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldSourceAirportId, v))
}

// DestinationAirportIdEQ applies the EQ predicate on the "destinationAirportId" field.
func DestinationAirportIdEQ(v int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldDestinationAirportId, v))
}

// DestinationAirportIdNEQ applies the NEQ predicate on the "destinationAirportId" field.
func DestinationAirportIdNEQ(v int) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldDestinationAirportId, v))
}

// DestinationAirportIdIn applies the In predicate on the "destinationAirportId" field.
func DestinationAirportIdIn(vs ...int) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldDestinationAirportId, vs...))
}

// DestinationAirportIdNotIn applies the NotIn predicate on the "destinationAirportId" field.
func DestinationAirportIdNotIn(vs ...int) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldDestinationAirportId, vs...))
}

// DestinationAirportIdGT applies the GT predicate on the "destinationAirportId" field.
func DestinationAirportIdGT(v int) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldDestinationAirportId, v))
}

// DestinationAirportIdGTE applies the GTE predicate on the "destinationAirportId" field.
func DestinationAirportIdGTE(v int) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldDestinationAirportId, v))
}

// DestinationAirportIdLT applies the LT predicate on the "destinationAirportId" field.
func DestinationAirportIdLT(v int) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldDestinationAirportId, v))
}

// DestinationAirportIdLTE applies the LTE predicate on the "destinationAirportId" field.
func DestinationAirportIdLTE(v int) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldDestinationAirportId, v))
}

// PlaneIdEQ applies the EQ predicate on the "planeId" field.
func PlaneIdEQ(v int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldPlaneId, v))
}

// PlaneIdNEQ applies the NEQ predicate on the "planeId" field.
func PlaneIdNEQ(v int) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldPlaneId, v))
}

// PlaneIdIn applies the In predicate on the "planeId" field.
func PlaneIdIn(vs ...int) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldPlaneId, vs...))
}

// PlaneIdNotIn applies the NotIn predicate on the "planeId" field.
func PlaneIdNotIn(vs ...int) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldPlaneId, vs...))
}

// PlaneIdGT applies the GT predicate on the "planeId" field.
func PlaneIdGT(v int) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldPlaneId, v))
}

// PlaneIdGTE applies the GTE predicate on the "planeId" field.
func PlaneIdGTE(v int) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldPlaneId, v))
}

// PlaneIdLT applies the LT predicate on the "planeId" field.
func PlaneIdLT(v int) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldPlaneId, v))
}

// PlaneIdLTE applies the LTE predicate on the "planeId" field.
func PlaneIdLTE(v int) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldPlaneId, v))
}

// NumberOfStopsEQ applies the EQ predicate on the "numberOfStops" field.
func NumberOfStopsEQ(v int) predicate.Route {
	return predicate.Route(sql.FieldEQ(FieldNumberOfStops, v))
}

// NumberOfStopsNEQ applies the NEQ predicate on the "numberOfStops" field.
func NumberOfStopsNEQ(v int) predicate.Route {
	return predicate.Route(sql.FieldNEQ(FieldNumberOfStops, v))
}

// NumberOfStopsIn applies the In predicate on the "numberOfStops" field.
func NumberOfStopsIn(vs ...int) predicate.Route {
	return predicate.Route(sql.FieldIn(FieldNumberOfStops, vs...))
}

// NumberOfStopsNotIn applies the NotIn predicate on the "numberOfStops" field.
func NumberOfStopsNotIn(vs ...int) predicate.Route {
	return predicate.Route(sql.FieldNotIn(FieldNumberOfStops, vs...))
}

// NumberOfStopsGT applies the GT predicate on the "numberOfStops" field.
func NumberOfStopsGT(v int) predicate.Route {
	return predicate.Route(sql.FieldGT(FieldNumberOfStops, v))
}

// NumberOfStopsGTE applies the GTE predicate on the "numberOfStops" field.
func NumberOfStopsGTE(v int) predicate.Route {
	return predicate.Route(sql.FieldGTE(FieldNumberOfStops, v))
}

// NumberOfStopsLT applies the LT predicate on the "numberOfStops" field.
func NumberOfStopsLT(v int) predicate.Route {
	return predicate.Route(sql.FieldLT(FieldNumberOfStops, v))
}

// NumberOfStopsLTE applies the LTE predicate on the "numberOfStops" field.
func NumberOfStopsLTE(v int) predicate.Route {
	return predicate.Route(sql.FieldLTE(FieldNumberOfStops, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Route) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Route) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Route) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		p(s.Not())
	})
}
